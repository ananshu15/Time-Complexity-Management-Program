#include<iostream>
#include <chrono>
#include<math.h>
using namespace std;
class vector//to create a vector of integer
{
	int *a;
	int n;//size of vector
	public:
	vector(int s)//consructer
	{
		n=s;
		a=new int[n];
	}
	void randomvector()//create a random vector
	{
		int i;
			srand(time(0));

			for(i=0;i<n;i++)
			{

				a[i]=(rand() % n) + 1;
			}
	}

	/* function to sort array using shellSort by formula a(n) = 4^(n+1) + 3*2^n + 1. */
	void shellsort3()
	{
		int gaps[100];//Array to store the gaps generated by formula
		int gap,temp,i,j,k;

		/*It will generate the gaps by by formula formula a(n) = 4^(n+1) + 3*2^n + 1
		and stores these all gaps into an array*/
		gaps[0]=1;
		for(k=0;pow(4,k+1)+3*pow(2,k)+1<=n;k++)
		{
			gaps[k+1]=pow(4,k+1)+3*pow(2,k)+1;
		}
		//sorting starts from highest gap and it will sort array
		for(gap=gaps[k];k>=0;k--,gap=gaps[k])
		{
			for (i = gap; i < n; i += 1)
			{
				temp = a[i];
				for (j = i; j >= gap and a[j - gap] > temp; j -= gap)
			    {
			    	a[j] = a[j - gap];
			    }
				a[j] = temp;
			}
		}

	}

	/* function to sort array using shellSort by formula a(n)=2^n+1 */
	void shellsort1()
	{
		int gaps[100];//Array to store the gaps generated by formula

		int gap,temp,i,j,k;

		/*It will generate the gaps by by formula formula a(n)=2^n+1
						and stores these all gaps into an array*/
		gaps[0]=1;
		for(k=1;pow(2,k)+1<=n;k++)
		{
				gaps[k]=pow(2,k)+1;
		}
		k--;
		//sorting starts from highest gap and it will sort  array
		for(gap=gaps[k];k>=0;k--,gap=gaps[k])
		{
			for (i = gap; i < n; i += 1)
	    	{
	        	temp = a[i];

	        	for (j = i; j >= gap and a[j - gap] > temp; j -= gap)
	        	{
	            	a[j] = a[j - gap];
	        	}

	        	a[j] = temp;
	    	}
		}

	}
	/* function to sort array using shellSort by formula
	a(n) = 9*2^n - 9*2^(n/2) + 1 if n is even;

	a(n) = 8*2^n - 6*2^((n+1)/2) + 1 if n is odd. */
	void shellsort2()
	{
		int gaps[100];//Array to store the gaps generated by formula
		int gap,temp,i,j,k;

		/*It will generate the gaps by by formula formula
				a(n) = 9*2^n - 9*2^(n/2) + 1 if n is even;

				a(n) = 8*2^n - 6*2^((n+1)/2) + 1 if n is odd.
								and stores these all gaps into an array*/
		for(k=0;(9*pow(2,k))-(9*pow(2,k/2))+1<=n ||(8*pow(2,k))-(6*pow(2,(k+1)/2))<=n;k++)
		{
			if(k%2==0)
			{
				gaps[k]=(9*pow(2,k))-(9*pow(2,k/2))+1;

			}
			else
			{
				gaps[k]=(8*pow(2,k))-(6*pow(2,(k+1)/2))+1;

			}


		}
		k--;
		//sorting starts from highest gap and it will sort  array
		for(gap=gaps[k];k>=0;k--,gap=gaps[k])
		{
			for (i = gap; i < n; i += 1)
			{
				temp = a[i];
				for (j = i; j >= gap and a[j - gap] > temp; j -= gap)
			    {
			    	a[j] = a[j - gap];
			    }
				a[j] = temp;
			}

		}

	}


};
int main()
{

	//sum of exection time taken by shellsort1 by all three vectors
	float shell1sumv1=0.0,shell1sumv2=0.0,shell1sumv3=0.0;
	//sum of exection time taken by shellsort2 by all three vectors
	float shell2sumv1=0.0,shell2sumv2=0.0,shell2sumv3=0.0;
	//sum of exection time taken by shellsort3 by all three vectors
	float shell3sumv1=0.0,shell3sumv2=0.0,shell3sumv3=0.0;
	//to record execution time for vector v1(5000) for all three shellshort
	float shell1timev1five[10],shell2timev1five[10],shell3timev1five[10];
	//to record execution time for vector v2(10000) for all three shellshort
	float shell1timev2ten[10],shell2timev2ten[10],shell3timev2ten[10];
	//to record execution time for vector v3(20000) for all three shellshort
	float shell1timev3twenty[10],shell2timev3twenty[10],shell3timev3twenty[10];;
    vector v1(5000);//first vector size 5000
    vector v2(10000);//second vector size 10000
	vector v3(20000);//third vector size 20000
	int i;
	v1.randomvector();
	v2.randomvector();
	v3.randomvector();

	//record the execution time and store them into an array

	cout<<endl<<"Three Shell sort for 5k,10k,20k vector"<<endl;
	for(i=0;i<10;i++)
	{
				cout<<"Shellsort1 for v1"<<endl;
				// Start measuring time
		    	auto begin = std::chrono::high_resolution_clock::now();
		    	v1.shellsort1();
		    	// Stop measuring time and calculate the elapsed time
				auto end = std::chrono::high_resolution_clock::now();
				auto elapsed = std::chrono::duration_cast<std::chrono::nanoseconds>(end - begin);
				shell1timev1five[i]=elapsed.count() * 1e-9;
				v1.randomvector();

				cout<<"Shellsort1 for v2"<<endl;
				// Start measuring time
				begin = std::chrono::high_resolution_clock::now();
				v2.shellsort1();
				// Stop measuring time and calculate the elapsed time
				end = std::chrono::high_resolution_clock::now();
				elapsed = std::chrono::duration_cast<std::chrono::nanoseconds>(end - begin);
				shell1timev2ten[i]=elapsed.count() * 1e-9;
				v2.randomvector();

				cout<<"Shellsort1 for v3"<<endl;
				// Start measuring time
				begin = std::chrono::high_resolution_clock::now();
				v3.shellsort1();
				// Stop measuring time and calculate the elapsed time
				end = std::chrono::high_resolution_clock::now();
				elapsed = std::chrono::duration_cast<std::chrono::nanoseconds>(end - begin);
				shell1timev3twenty[i]=elapsed.count() * 1e-9;
				v3.randomvector();


				cout<<"Shellsort2 for v1"<<endl;
				// Start measuring time
				begin = std::chrono::high_resolution_clock::now();
				v1.shellsort2();
				// Stop measuring time and calculate the elapsed time
				end = std::chrono::high_resolution_clock::now();
				elapsed = std::chrono::duration_cast<std::chrono::nanoseconds>(end - begin);
				shell2timev1five[i]=elapsed.count() * 1e-9;
				v1.randomvector();


				cout<<"Shellsort2 for v2"<<endl;
				// Start measuring time
				begin = std::chrono::high_resolution_clock::now();
				v2.shellsort2();
				// Stop measuring time and calculate the elapsed time
				end = std::chrono::high_resolution_clock::now();
				elapsed = std::chrono::duration_cast<std::chrono::nanoseconds>(end - begin);
				shell2timev2ten[i]=elapsed.count() * 1e-9;
				v2.randomvector();

				cout<<"Shellsort2 for v3"<<endl;
				// Start measuring time
				begin = std::chrono::high_resolution_clock::now();
				v3.shellsort2();
				// Stop measuring time and calculate the elapsed time
				end = std::chrono::high_resolution_clock::now();
				elapsed = std::chrono::duration_cast<std::chrono::nanoseconds>(end - begin);
				shell2timev3twenty[i]=elapsed.count() * 1e-9;
				v3.randomvector();

				cout<<"Shellsort3 for v1"<<endl;
				// Start measuring time
				begin = std::chrono::high_resolution_clock::now();
				v1.shellsort3();
				// Stop measuring time and calculate the elapsed time
				end = std::chrono::high_resolution_clock::now();
				elapsed = std::chrono::duration_cast<std::chrono::nanoseconds>(end - begin);
				shell3timev1five[i]=elapsed.count() * 1e-9;
				v1.randomvector();

				cout<<"Shellsort3 for v2"<<endl;
				// Start measuring time
				begin = std::chrono::high_resolution_clock::now();
				v2.shellsort3();
				// Stop measuring time and calculate the elapsed time
				end = std::chrono::high_resolution_clock::now();
				elapsed = std::chrono::duration_cast<std::chrono::nanoseconds>(end - begin);
				shell3timev2ten[i]=elapsed.count() * 1e-9;
				v2.randomvector();

				cout<<"Shellsort3 for v3"<<endl;
				// Start measuring time
				begin = std::chrono::high_resolution_clock::now();
				v3.shellsort3();
				// Stop measuring time and calculate the elapsed time
				end = std::chrono::high_resolution_clock::now();
				elapsed = std::chrono::duration_cast<std::chrono::nanoseconds>(end - begin);
				shell3timev3twenty[i]=elapsed.count() * 1e-9;
				v3.randomvector();

	}

	/*to display the execution time recorded and do the sum of it for all vectors
			for all shellsort*/

	cout<<"Shell sort1 for all three vector"<<endl;
	cout<<"Vector1(5000)"<<"\t"<<"Vector2(10000)"<<"\t"<<"Vector3(20000)"<<endl;
	for(i=0;i<10;i++)
	{
			shell1sumv1=shell1sumv1+shell1timev1five[i];
			shell1sumv2=shell1sumv2+shell1timev2ten[i];
			shell1sumv3=shell1sumv3+shell1timev3twenty[i];
			cout<<shell1timev1five[i]<<"\t"<<shell1timev2ten[i]<<"\t"<<shell1timev3twenty[i]<<endl;
	}
	cout<<"Shell sort2 for all three vector"<<endl;
	cout<<"Vector1(5000)"<<"\t"<<"Vector2(10000)"<<"\t"<<"Vector3(20000)"<<endl;
	for(i=0;i<10;i++)
	{
			shell2sumv1=shell2sumv1+shell2timev1five[i];
			shell2sumv2=shell2sumv2+shell2timev2ten[i];
			shell2sumv3=shell2sumv3+shell2timev3twenty[i];
			cout<<shell2timev1five[i]<<"\t"<<shell2timev2ten[i]<<"\t"<<shell2timev3twenty[i]<<endl;
	}
	cout<<"Shell sort3 for all three vector"<<endl;
	cout<<"Vector1(5000)"<<"\t"<<"Vector2(10000)"<<"\t"<<"Vector3(20000)"<<endl;
	for(i=0;i<10;i++)
	{
			shell3sumv1=shell3sumv1+shell3timev1five[i];
			shell3sumv2=shell3sumv2+shell3timev2ten[i];
			shell3sumv3=shell3sumv3+shell3timev3twenty[i];
			cout<<shell3timev1five[i]<<"\t"<<shell3timev2ten[i]<<"\t"<<shell3timev3twenty[i]<<endl;
	}
	//display the average execution time for all three vectors for all shellsort
	cout<<"average time shellsort1 for v1 "<<shell1sumv1/10.0<<endl;
	cout<<"average time shellsort1 for v2 "<<shell1sumv2/10.0<<endl;
	cout<<"average time shellsort1 for v3 "<<shell1sumv3/10.0<<endl;
	cout<<"average time shellsort2 for v1 "<<shell2sumv1/10.0<<endl;
	cout<<"average time shellsort2 for v2 "<<shell2sumv2/10.0<<endl;
	cout<<"average time shellsort2 for v3 "<<shell2sumv3/10.0<<endl;
	cout<<"average time shellsort3 for v1 "<<shell3sumv1/10.0<<endl;
	cout<<"average time shellsort3 for v2 "<<shell3sumv2/10.0<<endl;
	cout<<"average time shellsort3 for v3 "<<shell3sumv3/10.0<<endl;


return 0;

}
